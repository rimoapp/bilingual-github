name: Translate Markdown Files
 
on:
  workflow_call:
    secrets:
      OPENAI_API_KEY:
        required: true
      RIMO_GITHUB_APP_ID:
        required: false
      RIMO_GITHUB_APP_PRIVATE_KEY:
        required: false
    inputs:
      is_initial_setup:
        required: false
        type: boolean
        default: false
        description: 'Whether this is the initial setup run'
      changed_files:
        required: false
        type: string
        default: ''
        description: 'Comma-separated list of changed files'
      deleted_files:
        required: false
        type: string
        default: ''
        description: 'Comma-separated list of deleted files'
      is_pr:
        required: false
        type: boolean
        default: false
        description: 'Whether this is a PR event'
      pr_number:
        required: false
        type: string
        default: ''
        description: 'PR number if applicable'
      target_branch:
        required: false
        type: string
        default: ''
        description: 'Target branch for PR commits'

permissions:
  contents: write
  pull-requests: write

jobs:
  translate-markdown:
    runs-on: ubuntu-latest

    steps:
      - name: Check if Rimo GitHub App credentials exist
        id: check_app_creds
        env:
          RIMO_APP_ID: ${{ secrets.RIMO_GITHUB_APP_ID }}
          RIMO_PRIVATE_KEY: ${{ secrets.RIMO_GITHUB_APP_PRIVATE_KEY }}
        run: |
          if [[ -n "$RIMO_APP_ID" && -n "$RIMO_PRIVATE_KEY" ]]; then
            echo "has_app_creds=true" >> $GITHUB_OUTPUT
            echo "Rimo GitHub App credentials found"
          else
            echo "has_app_creds=false" >> $GITHUB_OUTPUT
            echo "Rimo GitHub App credentials not found, will use GITHUB_TOKEN"
          fi

      - name: Generate GitHub App Token (for commits only)
        id: generate_token
        if: steps.check_app_creds.outputs.has_app_creds == 'true'
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.RIMO_GITHUB_APP_ID }}
          private_key: ${{ secrets.RIMO_GITHUB_APP_PRIVATE_KEY }}

      - name: Checkout Translation Tools Repository
        uses: actions/checkout@v3
        with:
          repository: rimoapp/bilingual-github
          path: bilingual-github
          token: ${{ github.token }}

      - name: Checkout Target Repository
        uses: actions/checkout@v3
        with:
          path: target-repo
          fetch-depth: 0
          token: ${{ github.token }}

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install Translation Dependencies
        working-directory: bilingual-github
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configure Git User
        working-directory: target-repo
        run: |
          if [ -n "${{ steps.generate_token.outputs.token }}" ]; then
            git config user.name "rimo-translation-bot[bot]"
            git config user.email "rimo-translation-bot[bot]@users.noreply.github.com"
          else
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
          fi

      - name: Switch to target branch for PR
        if: inputs.is_pr == true
        working-directory: target-repo
        run: |
          git checkout ${{ inputs.target_branch }}

      - name: Generate Markdown Translations
        working-directory: target-repo
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          IS_INITIAL_SETUP: ${{ inputs.is_initial_setup }}
          CHANGED_FILES: ${{ inputs.changed_files }}
          DELETED_FILES: ${{ inputs.deleted_files }}
          IS_PR: ${{ inputs.is_pr }}
        run: |
          echo "Debug: OPENAI_API_KEY is set: $([ -n "$OPENAI_API_KEY" ] && echo "yes" || echo "no")"
          
          if [ "$IS_INITIAL_SETUP" = "true" ]; then
            echo "Performing initial setup translation"
            OPENAI_API_KEY="${OPENAI_API_KEY}" python ../bilingual-github/src/hooks/post_commit.py --initial-setup
          elif [ -n "$CHANGED_FILES" ] || [ -n "$DELETED_FILES" ]; then
            echo "Translating changed files: $CHANGED_FILES"
            echo "Deleting translated files for: $DELETED_FILES"
            OPENAI_API_KEY="${OPENAI_API_KEY}" python ../bilingual-github/src/hooks/post_commit.py --files "$CHANGED_FILES" --deleted-files "$DELETED_FILES"
          else
            echo "Translating all markdown files"
            OPENAI_API_KEY="${OPENAI_API_KEY}" python ../bilingual-github/src/hooks/post_commit.py
          fi

      - name: Commit and Push Translations
        working-directory: target-repo
        env:
          # Use Rimo App token for commits if available, otherwise use GITHUB_TOKEN
          GH_TOKEN: ${{ steps.generate_token.outputs.token || github.token }}
        run: |
          # Configure git to use the appropriate token
          git remote set-url origin https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }}.git
          
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            if [ "${{ inputs.is_pr }}" = "true" ]; then
              git commit -m "Update markdown translations [skip-translation]"
              
              # Pull with rebase to handle any new commits, then push
              echo "Pulling latest changes before push..."
              git pull --rebase origin ${{ inputs.target_branch }} || {
                echo "Rebase conflict detected, aborting and retrying with merge"
                git rebase --abort
                git pull origin ${{ inputs.target_branch }}
              }
              
              echo "Pushing translations..."
              git push origin ${{ inputs.target_branch }}
            else
              git commit -m "Update markdown translations [skip-translation]"
              git pull --rebase origin HEAD || {
                git rebase --abort
                git pull origin HEAD
              }
              git push
            fi
          fi